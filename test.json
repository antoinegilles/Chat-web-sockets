{
    nsp:
     Namespace {
       name: '/',
       server:
        Server {
          nsps: [Object
            ],
          parentNsps: Map {},
          _path: '/socket.io',
          _serveClient: true,
          parser: [Object
            ],
          encoder: Encoder {},
          _adapter: [Function: Adapter
            ],
          _origins: '*:*',
          sockets: [Circular
            ],
          eio: [Object
            ],
          httpServer: [Object
            ],
          engine: [Object
            ]
        },
       sockets: { vj9X2OuIX0fGnCIqAAAA: [Circular
            ]
        },
       connected: { vj9X2OuIX0fGnCIqAAAA: [Circular
            ]
        },
       fns: [],
       ids: 0,
       rooms: [],
       flags: {},
       adapter:
        Adapter {
          nsp: [Circular
            ],
          rooms: [Object
            ],
          sids: [Object
            ],
          encoder: Encoder {}
        },
       _events: { connection: [Array
            ]
        },
       _eventsCount: 1
    },
    server:
     Server {
       nsps: { '/': [Object
            ]
        },
       parentNsps: Map {},
       _path: '/socket.io',
       _serveClient: true,
       parser: { protocol: 4,
          types: [Array
            ],
          CONNECT: 0,
          DISCONNECT: 1,
          EVENT: 2,
          ACK: 3,
          ERROR: 4,
          BINARY_EVENT: 5,
          BINARY_ACK: 6,
          Encoder: [Function: Encoder
            ],
          Decoder: [Function: Decoder
            ]
        },
       encoder: Encoder {},
       _adapter: [Function: Adapter
        ],
       _origins: '*:*',
       sockets:
        Namespace {
          name: '/',
          server: [Circular
            ],
          sockets: [Object
            ],
          connected: [Object
            ],
          fns: [],
          ids: 0,
          rooms: [],
          flags: {},
          adapter: [Object
            ],
          _events: [Object
            ],
          _eventsCount: 1
        },
       eio:
        Server {
          clients: [Object
            ],
          clientsCount: 1,
          wsEngine: 'ws',
          pingTimeout: 5000,
          pingInterval: 25000,
          upgradeTimeout: 10000,
          maxHttpBufferSize: 100000000,
          transports: [Array
            ],
          allowUpgrades: true,
          allowRequest: [Function: bound
            ],
          cookie: 'io',
          cookiePath: '/',
          cookieHttpOnly: true,
          perMessageDeflate: [Object
            ],
          httpCompression: [Object
            ],
          initialPacket: [Array
            ],
          ws: [Object
            ],
          _events: [Object
            ],
          _eventsCount: 1
        },
       httpServer:
        Server {
          domain: null,
          _events: [Object
            ],
          _eventsCount: 5,
          _maxListeners: undefined,
          _connections: 1,
          _handle: [Object
            ],
          _usingSlaves: false,
          _slaves: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          _pendingResponseData: 0,
          maxHeadersCount: null,
          _connectionKey: '6: : : : 3000',
            [Symbol(asyncId)
            ]: 8
        },
       engine:
        Server {
          clients: [Object
            ],
          clientsCount: 1,
          wsEngine: 'ws',
          pingTimeout: 5000,
          pingInterval: 25000,
          upgradeTimeout: 10000,
          maxHttpBufferSize: 100000000,
          transports: [Array
            ],
          allowUpgrades: true,
          allowRequest: [Function: bound
            ],
          cookie: 'io',
          cookiePath: '/',
          cookieHttpOnly: true,
          perMessageDeflate: [Object
            ],
          httpCompression: [Object
            ],
          initialPacket: [Array
            ],
          ws: [Object
            ],
          _events: [Object
            ],
          _eventsCount: 1
        }
    },
    adapter:
     Adapter {
       nsp:
        Namespace {
          name: '/',
          server: [Object
            ],
          sockets: [Object
            ],
          connected: [Object
            ],
          fns: [],
          ids: 0,
          rooms: [],
          flags: {},
          adapter: [Circular
            ],
          _events: [Object
            ],
          _eventsCount: 1
        },
       rooms: { vj9X2OuIX0fGnCIqAAAA: [Object
            ]
        },
       sids: { vj9X2OuIX0fGnCIqAAAA: [Object
            ]
        },
       encoder: Encoder {}
    },
    id: 'vj9X2OuIX0fGnCIqAAAA',
    client:
     Client {
       server:
        Server {
          nsps: [Object
            ],
          parentNsps: Map {},
          _path: '/socket.io',
          _serveClient: true,
          parser: [Object
            ],
          encoder: Encoder {},
          _adapter: [Function: Adapter
            ],
          _origins: '*:*',
          sockets: [Object
            ],
          eio: [Object
            ],
          httpServer: [Object
            ],
          engine: [Object
            ]
        },
       conn:
        Socket {
          id: 'vj9X2OuIX0fGnCIqAAAA',
          server: [Object
            ],
          upgrading: false,
          upgraded: false,
          readyState: 'open',
          writeBuffer: [],
          packetsFn: [],
          sentCallbackFn: [],
          cleanupFn: [Array
            ],
          request: [Object
            ],
          remoteAddress: ': :ffff: 127.0.0.1',
          checkIntervalTimer: null,
          upgradeTimeoutTimer: null,
          pingTimeoutTimer: [Object
            ],
          transport: [Object
            ],
          _events: [Object
            ],
          _eventsCount: 3
        },
       encoder: Encoder {},
       decoder: Decoder { reconstructor: null, _callbacks: [Object
            ]
        },
       id: 'vj9X2OuIX0fGnCIqAAAA',
       request:
        IncomingMessage {
          _readableState: [Object
            ],
          readable: true,
          domain: null,
          _events: {},
          _eventsCount: 0,
          _maxListeners: undefined,
          socket: [Object
            ],
          connection: [Object
            ],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: [Object
            ],
          rawHeaders: [Array
            ],
          trailers: {},
          rawTrailers: [],
          upgrade: false,
          url: '/socket.io/?EIO=3&transport=polling&t=MJHqB6l',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Object
            ],
          _consuming: false,
          _dumped: true,
          _query: [Object
            ],
          res: [Object
            ],
          cleanup: [Function: cleanup
            ]
        },
       onclose: [Function: bound
        ],
       ondata: [Function: bound
        ],
       onerror: [Function: bound
        ],
       ondecoded: [Function: bound
        ],
       sockets: { vj9X2OuIX0fGnCIqAAAA: [Circular
            ]
        },
       nsps: { '/': [Circular
            ]
        },
       connectBuffer: []
    },
    conn:
     Socket {
       id: 'vj9X2OuIX0fGnCIqAAAA',
       server:
        Server {
          clients: [Object
            ],
          clientsCount: 1,
          wsEngine: 'ws',
          pingTimeout: 5000,
          pingInterval: 25000,
          upgradeTimeout: 10000,
          maxHttpBufferSize: 100000000,
          transports: [Array
            ],
          allowUpgrades: true,
          allowRequest: [Function: bound
            ],
          cookie: 'io',
          cookiePath: '/',
          cookieHttpOnly: true,
          perMessageDeflate: [Object
            ],
          httpCompression: [Object
            ],
          initialPacket: [Array
            ],
          ws: [Object
            ],
          _events: [Object
            ],
          _eventsCount: 1
        },
       upgrading: false,
       upgraded: false,
       readyState: 'open',
       writeBuffer: [],
       packetsFn: [],
       sentCallbackFn: [],
       cleanupFn: [
            [Function
            ],
            [Function
            ]
        ],
       request:
        IncomingMessage {
          _readableState: [Object
            ],
          readable: true,
          domain: null,
          _events: {},
          _eventsCount: 0,
          _maxListeners: undefined,
          socket: [Object
            ],
          connection: [Object
            ],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: true,
          headers: [Object
            ],
          rawHeaders: [Array
            ],
          trailers: {},
          rawTrailers: [],
          upgrade: false,
          url: '/socket.io/?EIO=3&transport=polling&t=MJHqB6l',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Object
            ],
          _consuming: false,
          _dumped: true,
          _query: [Object
            ],
          res: [Object
            ],
          cleanup: [Function: cleanup
            ]
        },
       remoteAddress: ': :ffff: 127.0.0.1',
       checkIntervalTimer: null,
       upgradeTimeoutTimer: null,
       pingTimeoutTimer:
        Timeout {
          _called: false,
          _idleTimeout: 30000,
          _idlePrev: [Object
            ],
          _idleNext: [Object
            ],
          _idleStart: 1033,
          _onTimeout: [Function
            ],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
            [Symbol(asyncId)
            ]: 20,
            [Symbol(triggerAsyncId)
            ]: 16
        },
       transport:
        XHR {
          readyState: 'open',
          discarded: false,
          closeTimeout: 30000,
          maxHttpBufferSize: 100000000,
          httpCompression: [Object
            ],
          supportsBinary: true,
          _events: [Object
            ],
          _eventsCount: 5,
          sid: 'vj9X2OuIX0fGnCIqAAAA',
          req: null,
          res: null,
          writable: false
        },
       _events: { close: [Array
            ],
          data: [Function: bound
            ],
          error: [Function: bound
            ]
        },
       _eventsCount: 3
    },
    rooms: {},
    acks: {},
    connected: true,
    disconnected: false,
    handshake: { headers: { host: 'localhost: 3000',
          connection: 'keep-alive',
          pragma: 'no-cache',
          'cache-control': 'no-cache',
          accept: '*/*',
          'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36',
          referer: 'http://localhost:3000/',
          'accept-encoding': 'gzip, deflate, br',
          'accept-language': 'en-US,en;q=0.9,fr;q=0.8',
          cookie: 'io=sKjg_lfk8swBI9UCAAAB' },
       time: 'Wed Jul 25 2018 16:21:13 GMT+0200 (Paris, Madrid (heure d’été))',
       address: '::ffff:127.0.0.1',
       xdomain: false,
       secure: false,
       issued: 1532528473071,
       url: '/socket.io/?EIO=3&transport=polling&t=MJHqB6l',
       query: { EIO: '3', transport: 'polling', t: 'MJHqB6l' } },
    fns: [],
    flags: {},
    _rooms: [] }
